<?xml version="1.0" encoding="UTF-8"?>

<web-app xmlns="http://java.sun.com/xml/ns/j2ee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"
version="2.4">
	<display-name>Security EAI Web</display-name>

	<!-- Spring application context files. Files are loaded in the order they
	appear with subsequent files overwriting same named beans in previous files. -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
			classpath:spring/**/spring-beans-*.xml</param-value>
	</context-param>

	<!-- Spring listener used to load up the configuration -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<!-- Fix WebSphere Issue, see also: http://forum.springsource.org/showthread.php?94033-Spring-security-Websphere-6-Error-500-springSecurityFilterChain-is-unavailable -->
	<filter>
		<filter-name>requestContextFilter</filter-name>
		<filter-class>org.springframework.web.filter.RequestContextFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>requestContextFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!-- 配置spring的过滤器 -->
	<filter>
		<filter-name>CharacterEncodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>utf-8</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>CharacterEncodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<!-- END 配置spring的过滤器 -->

	<!-- For Security Filter -->
	<filter>
		<description>Security Handler</description>
		<display-name>AccessEnforcer</display-name>
		<filter-name>AccessEnforcer</filter-name>
		<filter-class>group.tivoli.security.eai.web.sso.AccessEnforcer</filter-class>
		<init-param>
			<description>Define authentication method for protected resources.</description>
			<param-name>AuthenticationMethod</param-name>
			<param-value>urn:oasis:names:tc:SAML:2.0:ac:classes:TAMUsernamePassword</param-value>
		</init-param>
		<init-param>
			<description>Flag for Re-Authen</description>
			<param-name>AlwaysReauthen</param-name>
			<param-value>false</param-value>
		</init-param>
		<init-param>
			<description>default auth page</description>
			<param-name>authPage</param-name>
			<param-value>/AuthEngine</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>AccessEnforcer</filter-name>
		<url-pattern>/main.html</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>AccessEnforcer</filter-name>
		<url-pattern>/sso.html</url-pattern>
	</filter-mapping>
	<!-- END For Security Filter -->

	<!-- 覆盖default servlet的/, springmvc servlet将处理原来处理静态资源的映射 -->
	<servlet>
		<servlet-name>springmvc</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:spring/springmvc-servlet.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>

	<servlet-mapping>
		<servlet-name>springmvc</servlet-name>
		<url-pattern>*.do</url-pattern>
	</servlet-mapping>
	<!-- END 覆盖default servlet的/, springmvc servlet将处理原来处理静态资源的映射 -->
	
	<!-- 集中认证入口 -->
	<servlet>
		<description>认证入口</description>
		<servlet-name>AuthenticationEngine</servlet-name>
		<servlet-class>group.tivoli.security.eai.web.servlet.AuthenticationEngine</servlet-class>
		<init-param>
			<description>Flag for EAI Authen</description>
			<param-name>eaiAuthen</param-name>
			<param-value>true</param-value>
		</init-param>
		<init-param>
			<param-name>mainPage</param-name>
			<param-value>/main.html</param-value>
		</init-param>
		<init-param>
			<description>default login page</description>
			<param-name>loginPage</param-name>
			<param-value>/auth/userpass</param-value>
		</init-param>
		<init-param>
			<description>webseal sso auth url</description>
			<param-name>ssoEAIPage</param-name>
			<param-value>/sso.html</param-value>
		</init-param>
		<load-on-startup>2</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>AuthenticationEngine</servlet-name>
		<url-pattern>/AuthEngine</url-pattern>
	</servlet-mapping>
	<!-- END 集中认证入口 -->

	<!-- Login Handler -->
	<servlet>
		<servlet-name>AuthLoginServlet</servlet-name>
		<servlet-class>group.tivoli.security.eai.web.servlet.LoginServlet</servlet-class>
		<init-param>
			<param-name>authenticationMethod</param-name>
			<param-value>urn:oasis:names:tc:SAML:2.0:ac:classes:TAMUsernamePassword</param-value>
		</init-param>
		<init-param>
			<param-name>jaasConfigName</param-name>
			<param-value>TamUserPassAuth</param-value>
		</init-param>
		<init-param>
			<param-name>loginPage</param-name>
			<param-value>/login/tam/loginform.do</param-value>
		</init-param>
		<init-param>
			<param-name>failureParam</param-name>
			<param-value>loginFailed</param-value>
		</init-param>
		<!-- 登录操作的标识 -->
		<init-param>
			<param-name>loginOptFlag</param-name>
			<param-value>login</param-value>
		</init-param>
		<!-- Form表单操作标识属性名称 -->
		<init-param>
			<param-name>formOptFlagAttribute</param-name>
			<param-value>op</param-value>
		</init-param>
		<load-on-startup>5</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>AuthLoginServlet</servlet-name>
		<url-pattern>/auth/userpass</url-pattern>
	</servlet-mapping>
	<!-- END Login Handler -->

	
	<!-- Modify Password Handler -->
	<servlet>
		<servlet-name>ModifyPasswordHandler</servlet-name>
		<servlet-class>group.tivoli.security.eai.web.servlet.ModifyPasswordServlet</servlet-class>
		<init-param>
			<param-name>authnPage</param-name>
			<param-value>/sso.html</param-value>
		</init-param>
		<init-param>
			<param-name>authServlet</param-name>
			<param-value>/auth/userpass</param-value>
		</init-param>
		<init-param>
			<param-name>usernameAttribute</param-name>
			<param-value>j_username</param-value>
		</init-param>
		<init-param>
			<param-name>showUsernameAttribute</param-name>
			<param-value>show_username</param-value>
		</init-param>
		<init-param>
			<param-name>passwordAttribute</param-name>
			<param-value>j_password</param-value>
		</init-param>
		<init-param>
			<param-name>newPassAttribute</param-name>
			<param-value>j_new_password</param-value>
		</init-param>
		<init-param>
			<param-name>optFlagAttribute</param-name>
			<param-value>op</param-value>
		</init-param>
		<init-param>
			<param-name>modifyPasswordFlag</param-name>
			<param-value>modifypassword</param-value>
		</init-param>
		<init-param>
			<param-name>modifyPasswordPage</param-name>
			<param-value>/modify_password.do</param-value>
		</init-param>
		<init-param>
			<param-name>userPassServiceBeanId</param-name>
			<param-value>timUserPassService</param-value>
		</init-param>
		<load-on-startup>7</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>ModifyPasswordHandler</servlet-name>
		<url-pattern>/ModifyPassword</url-pattern>
	</servlet-mapping>
	<!-- END Modify Password Handler -->

	<!-- 验证码Servlet -->
	<servlet>
		<servlet-name>Kaptcha</servlet-name>
		<servlet-class>com.google.code.kaptcha.servlet.KaptchaServlet</servlet-class>

		<!--
		For a complete list of Init Parameters, please see:
		http://code.google.com/p/kaptcha/wiki/ConfigParameters
		-->
		<init-param>
			<param-name>kaptcha.border</param-name>
			<param-value>no</param-value>
		</init-param>
		<init-param>
			<param-name>kaptcha.textproducer.font.color</param-name>
			<param-value>black</param-value>
		</init-param>
		<init-param>
			<param-name>kaptcha.textproducer.char.space</param-name>
			<param-value>10</param-value>
		</init-param>
		<init-param>
			<param-name>kaptcha.textproducer.font.size</param-name>
			<param-value>20</param-value>
		</init-param>
		<init-param>
			<param-name>kaptcha.textproducer.char.length</param-name>
			<param-value>4</param-value>
		</init-param>
		<init-param>
			<param-name>kaptcha.obscurificator.impl</param-name>
			<param-value>group.tivoli.security.eai.web.auth.kaptcha.NoObscurificator</param-value>
		</init-param>
		<init-param>
			<param-name>kaptcha.image.width</param-name>
			<param-value>100</param-value>
		</init-param>
		<init-param>
			<param-name>kaptcha.image.height</param-name>
			<param-value>30</param-value>
		</init-param>
	</servlet>
	<servlet-mapping>
		<servlet-name>Kaptcha</servlet-name>
		<url-pattern>/Kaptcha.jpg</url-pattern>
	</servlet-mapping>

	<!-- END 验证码Servlet -->
	
	<error-page>
		<error-code>500</error-code>
		<location>/error.do</location>
	</error-page>
	<error-page>
		<error-code>404</error-code>
		<location>/error404.do</location>
	</error-page>
	<welcome-file-list>
		<welcome-file>index.html</welcome-file>
	</welcome-file-list>

</web-app>
